(self.webpackChunk_graphql_codegen_website=self.webpackChunk_graphql_codegen_website||[]).push([[1270],{35318:function(e,n,a){"use strict";a.d(n,{Zo:function(){return c},kt:function(){return u}});var t=a(27378);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function p(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=t.createContext({}),s=function(e){var n=t.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},c=function(e){var n=s(e.components);return t.createElement(o.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(a),u=r,k=m["".concat(o,".").concat(u)]||m[u]||d[u]||i;return a?t.createElement(k,l(l({ref:n},c),{},{components:a})):t.createElement(k,l({ref:n},c))}));function u(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=m;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var s=2;s<i;s++)l[s]=a[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},12329:function(e,n,a){"use strict";a.r(n),a.d(n,{frontMatter:function(){return l},metadata:function(){return p},toc:function(){return o},default:function(){return c}});var t=a(29603),r=a(50120),i=(a(27378),a(35318)),l={},p={unversionedId:"generated-config/c-sharp",id:"generated-config/c-sharp",isDocsHomePage:!1,title:"c-sharp",description:"This plugin generates C# class identifier for your schema types.",source:"@site/docs/generated-config/c-sharp.md",sourceDirName:"generated-config",slug:"/generated-config/c-sharp",permalink:"/docs/generated-config/c-sharp",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/generated-config/c-sharp.md",version:"current",frontMatter:{}},o=[{value:"Installation",id:"installation",children:[]},{value:"API Reference",id:"api-reference",children:[{value:"<code>enumValues</code>",id:"enumvalues",children:[]},{value:"<code>namespaceName</code>",id:"namespacename",children:[]},{value:"<code>className</code>",id:"classname",children:[]},{value:"<code>listType</code>",id:"listtype",children:[]},{value:"<code>emitRecords</code>",id:"emitrecords",children:[]},{value:"<code>strictScalars</code>",id:"strictscalars",children:[]},{value:"<code>defaultScalarType</code>",id:"defaultscalartype",children:[]},{value:"<code>scalars</code>",id:"scalars",children:[]},{value:"<code>namingConvention</code>",id:"namingconvention",children:[]},{value:"<code>typesPrefix</code>",id:"typesprefix",children:[]},{value:"<code>typesSuffix</code>",id:"typessuffix",children:[]},{value:"<code>skipTypename</code>",id:"skiptypename",children:[]},{value:"<code>nonOptionalTypename</code>",id:"nonoptionaltypename",children:[]},{value:"<code>useTypeImports</code>",id:"usetypeimports",children:[]}]}],s={toc:o};function c(e){var n=e.components,a=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,t.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This plugin generates C# ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," identifier for your schema types."),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("img",{alt:"c-sharp plugin version",src:"https://img.shields.io/npm/v/@graphql-codegen/c-sharp?color=%23e15799&label=plugin\xa0version&style=for-the-badge"}),(0,i.kt)("div",{className:"admonition admonition-shell"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16pt",height:"16pt",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",d:"M0 0v16h16V0zm15.063 15.063H.937v-11h14.126zm0-11.938H.937V.937h14.126zm0 0"}),(0,i.kt)("path",{parentName:"svg",d:"M1.875 1.563h.938V2.5h-.938zm0 0M3.438 1.563h.937V2.5h-.938zm0 0M5 1.563h.938V2.5H5zm0 0M1.875 5.074v1.348l.988.637-.988.578V9.05l2.828-1.668v-.586zm0 0M5.34 7.559h1.027v1.226H5.34zm0 0M5.34 5.32h1.027v1.23H5.34zm0 0M6.8 8.785h2.356v1.137H6.801zm0 0"}))),"Using ",(0,i.kt)("inlineCode",{parentName:"h5"},"yarn"))),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre"},"yarn add -D @graphql-codegen/c-sharp\n")))),(0,i.kt)("h2",{id:"api-reference"},"API Reference"),(0,i.kt)("h3",{id:"enumvalues"},(0,i.kt)("inlineCode",{parentName:"h3"},"enumValues")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"EnumValuesMap")),(0,i.kt)("p",null,"Overrides the default value of enum values declared in your GraphQL schema."),(0,i.kt)("h3",{id:"namespacename"},(0,i.kt)("inlineCode",{parentName:"h3"},"namespaceName")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"GraphQLCodeGen")),(0,i.kt)("p",null,"Allow you to customize the namespace name."),(0,i.kt)("h4",{id:"usage-examples"},"Usage Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"generates:\n  src/main/c-sharp/my-org/my-app/MyTypes.cs:\n    plugins:\n      - c-sharp\n    config:\n      namespaceName: MyCompany.MyNamespace\n")),(0,i.kt)("h3",{id:"classname"},(0,i.kt)("inlineCode",{parentName:"h3"},"className")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"Types")),(0,i.kt)("p",null,"Allow you to customize the parent class name."),(0,i.kt)("h4",{id:"usage-examples-1"},"Usage Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"generates:\n  src/main/c-sharp/my-org/my-app/MyGeneratedTypes.cs:\n    plugins:\n      - c-sharp\n    config:\n      className: MyGeneratedTypes\n")),(0,i.kt)("h3",{id:"listtype"},(0,i.kt)("inlineCode",{parentName:"h3"},"listType")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"IEnumerable")),(0,i.kt)("p",null,"Allow you to customize the list type"),(0,i.kt)("h4",{id:"usage-examples-2"},"Usage Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"generates:\n  src/main/c-sharp/my-org/my-app/Types.cs:\n    plugins:\n      - c-sharp\n    config:\n      listType: Map\n")),(0,i.kt)("h3",{id:"emitrecords"},(0,i.kt)("inlineCode",{parentName:"h3"},"emitRecords")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"false")),(0,i.kt)("p",null,"Emit C# 9.0+ records instead of classes"),(0,i.kt)("h4",{id:"usage-examples-3"},"Usage Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"generates:\n  src/main/c-sharp/my-org/my-app/Types.cs:\n    plugins:\n      - c-sharp\n    config:\n      emitRecords: true\n")),(0,i.kt)("h3",{id:"strictscalars"},(0,i.kt)("inlineCode",{parentName:"h3"},"strictScalars")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"false")),(0,i.kt)("p",null,"Makes scalars strict."),(0,i.kt)("p",null,"If scalars are found in the schema that are not defined in ",(0,i.kt)("inlineCode",{parentName:"p"},"scalars"),"\nan error will be thrown during codegen."),(0,i.kt)("h4",{id:"usage-examples-4"},"Usage Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"config:\n  strictScalars: true\n")),(0,i.kt)("h3",{id:"defaultscalartype"},(0,i.kt)("inlineCode",{parentName:"h3"},"defaultScalarType")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"any")),(0,i.kt)("p",null,"Allows you to override the type that unknown scalars will have."),(0,i.kt)("h4",{id:"usage-examples-5"},"Usage Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"config:\n  defaultScalarType: unknown\n")),(0,i.kt)("h3",{id:"scalars"},(0,i.kt)("inlineCode",{parentName:"h3"},"scalars")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"ScalarsMap")),(0,i.kt)("p",null,"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."),(0,i.kt)("h3",{id:"namingconvention"},(0,i.kt)("inlineCode",{parentName:"h3"},"namingConvention")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"NamingConvention"),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"change-case-all#pascalCase")),(0,i.kt)("p",null,"Allow you to override the naming convention of the output.\nYou can either override all namings, or specify an object with specific custom naming convention per output.\nThe format of the converter must be a valid ",(0,i.kt)("inlineCode",{parentName:"p"},"module#method"),".\nAllowed values for specific output are: ",(0,i.kt)("inlineCode",{parentName:"p"},"typeNames"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"enumValues"),'.\nYou can also use "keep" to keep all GraphQL names as-is.\nAdditionally you can set ',(0,i.kt)("inlineCode",{parentName:"p"},"transformUnderscore")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if you want to override the default behavior,\nwhich is to preserves underscores."),(0,i.kt)("p",null,"Available case functions in ",(0,i.kt)("inlineCode",{parentName:"p"},"change-case-all")," are ",(0,i.kt)("inlineCode",{parentName:"p"},"camelCase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"capitalCase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"constantCase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"dotCase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"headerCase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"noCase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"paramCase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"pascalCase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"pathCase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"sentenceCase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"snakeCase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"lowerCase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"localeLowerCase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"lowerCaseFirst"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"spongeCase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"titleCase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"upperCase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"localeUpperCase")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"upperCaseFirst"),"\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/btxtiger/change-case-all"},"See more")),(0,i.kt)("h3",{id:"typesprefix"},(0,i.kt)("inlineCode",{parentName:"h3"},"typesPrefix")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"\ndefault: ``"),(0,i.kt)("p",null,"Prefixes all the generated types."),(0,i.kt)("h4",{id:"usage-examples-6"},"Usage Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"config:\n  typesPrefix: I\n")),(0,i.kt)("h3",{id:"typessuffix"},(0,i.kt)("inlineCode",{parentName:"h3"},"typesSuffix")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"\ndefault: ``"),(0,i.kt)("p",null,"Suffixes all the generated types."),(0,i.kt)("h4",{id:"usage-examples-7"},"Usage Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"config:\n  typesSuffix: I\n")),(0,i.kt)("h3",{id:"skiptypename"},(0,i.kt)("inlineCode",{parentName:"h3"},"skipTypename")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"false")),(0,i.kt)("p",null,"Does not add __typename to the generated types, unless it was specified in the selection set."),(0,i.kt)("h4",{id:"usage-examples-8"},"Usage Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"config:\n  skipTypename: true\n")),(0,i.kt)("h3",{id:"nonoptionaltypename"},(0,i.kt)("inlineCode",{parentName:"h3"},"nonOptionalTypename")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"false")),(0,i.kt)("p",null,"Automatically adds ",(0,i.kt)("inlineCode",{parentName:"p"},"__typename")," field to the generated types, even when they are not specified\nin the selection set, and makes it non-optional"),(0,i.kt)("h4",{id:"usage-examples-9"},"Usage Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"config:\n  nonOptionalTypename: true\n")),(0,i.kt)("h3",{id:"usetypeimports"},(0,i.kt)("inlineCode",{parentName:"h3"},"useTypeImports")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"false")),(0,i.kt)("p",null,"Will use ",(0,i.kt)("inlineCode",{parentName:"p"},"import type {}")," rather than ",(0,i.kt)("inlineCode",{parentName:"p"},"import {}"),' when importing only types. This gives\ncompatibility with TypeScript\'s "importsNotUsedAsValues": "error" option'))}c.isMDXComponent=!0}}]);