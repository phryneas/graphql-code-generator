(self.webpackChunk_graphql_codegen_website=self.webpackChunk_graphql_codegen_website||[]).push([[4959],{35318:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(27378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=l(n),d=r,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},23219:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return p},toc:function(){return s},default:function(){return c}});var a=n(29603),r=n(50120),o=(n(27378),n(35318)),i={id:"named-operations-object",title:"Named Operations Object"},p={unversionedId:"plugins/named-operations-object",id:"plugins/named-operations-object",isDocsHomePage:!1,title:"Named Operations Object",description:"This plugin generates an object containing a list of all your GraphQL operations and fragments. This is useful if you are using Apollo-Client and wish to have type validation when you are using refetchQueries.",source:"@site/docs/plugins/named-operations-object.md",sourceDirName:"plugins",slug:"/plugins/named-operations-object",permalink:"/docs/plugins/named-operations-object",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/plugins/named-operations-object.md",version:"current",frontMatter:{id:"named-operations-object",title:"Named Operations Object"},sidebar:"sidebar",previous:{title:"TypeScript oclif",permalink:"/docs/plugins/typescript-oclif"},next:{title:"TypeScript TypeGraphQL",permalink:"/docs/plugins/typescript-type-graphql"}},s=[{value:"How to use?",id:"how-to-use",children:[]}],l={toc:s};function c(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This plugin generates an object containing a list of all your GraphQL operations and fragments. This is useful if you are using Apollo-Client and wish to have type validation when you are using ",(0,o.kt)("inlineCode",{parentName:"p"},"refetchQueries"),"."),(0,o.kt)("p",null,"All operations and fragments are being exported by their name (so unnamed operations are being ignored), in the following structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export const namedOperations = {\n  Query: [...],   \n  Mutation: [...],   \n  Subscription: [...],   \n  Fragment: [...],   \n}\n")),(0,o.kt)("p",null,(0,o.kt)("h2",{parentName:"p"},"Installation"),(0,o.kt)("img",{alt:"named-operations-object plugin version",src:"https://img.shields.io/npm/v/@graphql-codegen/named-operations-object?color=%23e15799&label=plugin\xa0version&style=for-the-badge"}),(0,o.kt)("div",{parentName:"p",className:"admonition admonition-shell"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16pt",height:"16pt",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",d:"M0 0v16h16V0zm15.063 15.063H.937v-11h14.126zm0-11.938H.937V.937h14.126zm0 0"}),(0,o.kt)("path",{parentName:"svg",d:"M1.875 1.563h.938V2.5h-.938zm0 0M3.438 1.563h.937V2.5h-.938zm0 0M5 1.563h.938V2.5H5zm0 0M1.875 5.074v1.348l.988.637-.988.578V9.05l2.828-1.668v-.586zm0 0M5.34 7.559h1.027v1.226H5.34zm0 0M5.34 5.32h1.027v1.23H5.34zm0 0M6.8 8.785h2.356v1.137H6.801zm0 0"}))),"Using ",(0,o.kt)("inlineCode",{parentName:"h5"},"yarn"))),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},"yarn add -D @graphql-codegen/named-operations-object\n")))),(0,o.kt)("h2",{parentName:"p"},"API Reference"),(0,o.kt)("h3",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"h3"},"identifierName")),(0,o.kt)("p",{parentName:"p"},"type: ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),"\ndefault: ",(0,o.kt)("inlineCode",{parentName:"p"},"namedOperations")),(0,o.kt)("p",{parentName:"p"},"Allow you to customize the name of the exported identifier"),(0,o.kt)("h4",{parentName:"p"},"Usage Examples"),(0,o.kt)("pre",{parentName:"p"},(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n   - named-operations-object\n config:\n   identifierName: ListAllOperations\n")),(0,o.kt)("h3",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"h3"},"useConsts")),(0,o.kt)("p",{parentName:"p"},"type: ",(0,o.kt)("inlineCode",{parentName:"p"},"boolean"),"\ndefault: ",(0,o.kt)("inlineCode",{parentName:"p"},"false")),(0,o.kt)("p",{parentName:"p"},"Will generate a const string instead of regular string.")),(0,o.kt)("h2",{id:"how-to-use"},"How to use?"),(0,o.kt)("p",null,"Include the plugin within your output (into an existing JS/TS file, or a new file), for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"schema: YOUR_SCHEMA\ndocuments: YOUR_OPERATIONS\ngenerates:\n  ./types.ts:\n    plugins:\n      - typescript\n      - typescript-operations\n      - named-operations-object\n")),(0,o.kt)("p",null,"Now, you should be able to import ",(0,o.kt)("inlineCode",{parentName:"p"},"namedOperations")," from that file, and use the names within your code. For example, with Apollo Client, you can do:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"client\n  .mutate(\n    { ... },\n    // No more typos, and you get auto-completion and build time validation\n    { refetchQueries: [namedOperations.Query.myQuery] }\n  );\n")))}c.isMDXComponent=!0}}]);