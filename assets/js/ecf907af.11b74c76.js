(self.webpackChunk_graphql_codegen_website=self.webpackChunk_graphql_codegen_website||[]).push([[9673],{35318:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return u}});var r=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),m=s(n),u=a,h=m["".concat(l,".").concat(u)]||m[u]||c[u]||i;return n?r.createElement(h,o(o({ref:t},d),{},{components:n})):r.createElement(h,o({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},78270:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return p},toc:function(){return l},default:function(){return d}});var r=n(29603),a=n(50120),i=(n(27378),n(35318)),o={},p={unversionedId:"generated-config/graphql-modules-preset",id:"generated-config/graphql-modules-preset",isDocsHomePage:!1,title:"graphql-modules-preset",description:"Installation",source:"@site/docs/generated-config/graphql-modules-preset.md",sourceDirName:"generated-config",slug:"/generated-config/graphql-modules-preset",permalink:"/docs/generated-config/graphql-modules-preset",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/generated-config/graphql-modules-preset.md",version:"current",frontMatter:{}},l=[{value:"Installation",id:"installation",children:[]},{value:"API Reference",id:"api-reference",children:[{value:"<code>baseTypesPath</code>",id:"basetypespath",children:[]},{value:"<code>importBaseTypesFrom</code>",id:"importbasetypesfrom",children:[]},{value:"<code>cwd</code>",id:"cwd",children:[]},{value:"<code>importTypesNamespace</code>",id:"importtypesnamespace",children:[]},{value:"<code>filename</code>",id:"filename",children:[]},{value:"<code>encapsulateModuleTypes</code>",id:"encapsulatemoduletypes",children:[]}]}],s={toc:l};function d(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("img",{alt:"graphql-modules-preset plugin version",src:"https://img.shields.io/npm/v/@graphql-codegen/graphql-modules-preset?color=%23e15799&label=plugin\xa0version&style=for-the-badge"}),(0,i.kt)("div",{className:"admonition admonition-shell"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16pt",height:"16pt",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",d:"M0 0v16h16V0zm15.063 15.063H.937v-11h14.126zm0-11.938H.937V.937h14.126zm0 0"}),(0,i.kt)("path",{parentName:"svg",d:"M1.875 1.563h.938V2.5h-.938zm0 0M3.438 1.563h.937V2.5h-.938zm0 0M5 1.563h.938V2.5H5zm0 0M1.875 5.074v1.348l.988.637-.988.578V9.05l2.828-1.668v-.586zm0 0M5.34 7.559h1.027v1.226H5.34zm0 0M5.34 5.32h1.027v1.23H5.34zm0 0M6.8 8.785h2.356v1.137H6.801zm0 0"}))),"Using ",(0,i.kt)("inlineCode",{parentName:"h5"},"yarn"))),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre"},"yarn add -D @graphql-codegen/graphql-modules-preset\n")))),(0,i.kt)("h2",{id:"api-reference"},"API Reference"),(0,i.kt)("h3",{id:"basetypespath"},(0,i.kt)("inlineCode",{parentName:"h3"},"baseTypesPath")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"string")),(0,i.kt)("p",null,"Required, should point to the base schema types file.\nThe key of the output is used a the base path for this file."),(0,i.kt)("h3",{id:"importbasetypesfrom"},(0,i.kt)("inlineCode",{parentName:"h3"},"importBaseTypesFrom")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"string")),(0,i.kt)("p",null,"Overrides the package import for the base types. Use this if you are within a monorepo and you wish\nto import the base types directly from a different package, and not from a relative path."),(0,i.kt)("h3",{id:"cwd"},(0,i.kt)("inlineCode",{parentName:"h3"},"cwd")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"process.cwd()")),(0,i.kt)("p",null,"Optional, override the ",(0,i.kt)("inlineCode",{parentName:"p"},"cwd")," of the execution. We are using ",(0,i.kt)("inlineCode",{parentName:"p"},"cwd")," to figure out the imports between files. Use this if your execuion path is not your project root directory."),(0,i.kt)("h3",{id:"importtypesnamespace"},(0,i.kt)("inlineCode",{parentName:"h3"},"importTypesNamespace")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"Types")),(0,i.kt)("p",null,"Optional, override the name of the import namespace used to import from the ",(0,i.kt)("inlineCode",{parentName:"p"},"baseTypesPath")," file."),(0,i.kt)("h3",{id:"filename"},(0,i.kt)("inlineCode",{parentName:"h3"},"filename")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"string")),(0,i.kt)("p",null,"Required, sets the file name for the generated files."),(0,i.kt)("h3",{id:"encapsulatemoduletypes"},(0,i.kt)("inlineCode",{parentName:"h3"},"encapsulateModuleTypes")),(0,i.kt)("p",null,"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"\ndefault: ",(0,i.kt)("inlineCode",{parentName:"p"},"namespace")),(0,i.kt)("p",null,"Configure how to encapsulate the module types, to avoid confusion."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"namespace")," (default): will wrap all types in a TypeScript namespace, using the module name.\n",(0,i.kt)("inlineCode",{parentName:"p"},"prefix"),": will prefix all types from a specific module with the module name.\n",(0,i.kt)("inlineCode",{parentName:"p"},"none"),": will skip encapsulation, and generate type as-is."))}d.isMDXComponent=!0}}]);