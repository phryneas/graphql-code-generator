(self.webpackChunk_graphql_codegen_website=self.webpackChunk_graphql_codegen_website||[]).push([[9373],{35318:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(27378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,g=d["".concat(s,".").concat(m)]||d[m]||c[m]||l;return n?a.createElement(g,o(o({ref:t},u),{},{components:n})):a.createElement(g,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},86690:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return i},toc:function(){return s},default:function(){return u}});var a=n(29603),r=n(50120),l=(n(27378),n(35318)),o={id:"documents-field",title:"`documents` field"},i={unversionedId:"getting-started/documents-field",id:"getting-started/documents-field",isDocsHomePage:!1,title:"`documents` field",description:"The documents field should point to your GraphQL documents: query, mutation, subscription and fragment.",source:"@site/docs/getting-started/documents-field.md",sourceDirName:"getting-started",slug:"/getting-started/documents-field",permalink:"/docs/getting-started/documents-field",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/getting-started/documents-field.md",version:"current",frontMatter:{id:"documents-field",title:"`documents` field"},sidebar:"sidebar",previous:{title:"`schema` field",permalink:"/docs/getting-started/schema-field"},next:{title:"`config` field",permalink:"/docs/getting-started/config-field"}},s=[{value:"How to use it?",id:"how-to-use-it",children:[{value:"Root level",id:"root-level",children:[]},{value:"Output-file level",id:"output-file-level",children:[]},{value:"Document Scanner",id:"document-scanner",children:[]}]},{value:"Available Formats",id:"available-formats",children:[]},{value:"GraphQL Tag Pluck",id:"graphql-tag-pluck",children:[]},{value:"Custom Document Loader",id:"custom-document-loader",children:[]}],p={toc:s};function u(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"documents")," field should point to your GraphQL documents: ",(0,l.kt)("inlineCode",{parentName:"p"},"query"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"mutation"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"subscription")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"fragment"),"."),(0,l.kt)("p",null,"It's optional, and required only if you are using plugins that generates code for the client-side."),(0,l.kt)("p",null,"You can specify either a ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," pointing to your documents, or ",(0,l.kt)("inlineCode",{parentName:"p"},"string[]")," point to multiple documents."),(0,l.kt)("h2",{id:"how-to-use-it"},"How to use it?"),(0,l.kt)("h3",{id:"root-level"},"Root level"),(0,l.kt)("p",null,"You can specify the ",(0,l.kt)("inlineCode",{parentName:"p"},"documents")," field in your root level config:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"schema: http://localhost:3000/graphql\ndocuments: 'src/**/*.graphql'\ngenerates:\n  ./src/types.ts:\n    plugins:\n      - typescript\n      - typescript-operations\n")),(0,l.kt)("h3",{id:"output-file-level"},"Output-file level"),(0,l.kt)("p",null,"You can also specify the ",(0,l.kt)("inlineCode",{parentName:"p"},"documents")," field in your generated file config:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"schema: http://server1.com/graphql\ngenerates:\n  ./src/types1.ts:\n    documents: 'src/**/*.graphql'\n    plugins:\n      - typescript\n      - typescript-operations\n")),(0,l.kt)("h3",{id:"document-scanner"},"Document Scanner"),(0,l.kt)("p",null,"The code-generator has a built-in document scanner, which means that you can specify a ",(0,l.kt)("inlineCode",{parentName:"p"},".graphql")," file or code files that contains GraphQL documents."),(0,l.kt)("p",null,"You can tell it to find documents in TypeScript files:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'schema: http://server1.com/graphql\ndocuments: "src/**/!(*.d).{ts,tsx}"\n')),(0,l.kt)("h2",{id:"available-formats"},"Available Formats"),(0,l.kt)("p",null,"The following can be specified as a single value or as an array with mixed values."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h3",{parentName:"li",id:"local-file"},"Local File"))),(0,l.kt)("p",null,"You can specify a ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," to point to a single file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"documents: my-query.graphql\n")),(0,l.kt)("p",null,"Or ",(0,l.kt)("inlineCode",{parentName:"p"},"string[]")," to point to multiple files:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"documents:\n  - my-query.graphql\n  - my-other-query.graphql\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h3",{parentName:"li",id:"glob-expression"},"Glob Expression"))),(0,l.kt)("p",null,"You can specify a Glob expression in order to load multiple files:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"documents: './src/**/*.graphql'\n")),(0,l.kt)("p",null,"You can also specify multiple Glob expressions as an array:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"documents:\n  - './src/dir1/*.graphql'\n  - './src/dir2/*.graphql'\n")),(0,l.kt)("p",null,"You can specify files to exclude by prefixing the Glob expression with ",(0,l.kt)("inlineCode",{parentName:"p"},"!"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"documents:\n  - './src/**/*.graphql'\n  - '!*.generated.graphql'\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"All provided glob expressions are evaluated together. The usage is similar to ",(0,l.kt)("inlineCode",{parentName:"p"},".gitignore"),".")),(0,l.kt)("p",null,"Additionally, you can use code files and the codegen will try to extract the GraphQL documents from it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"documents:\n  - './src/*.jsx'\n")),(0,l.kt)("p",null,"The codegen will try to load the file as an AST and look for explicit GraphQL operations strings, but if it can't find those, it will try to ",(0,l.kt)("inlineCode",{parentName:"p"},"require")," the file and look for operations in the default export."),(0,l.kt)("p",null,"You can disable the ",(0,l.kt)("inlineCode",{parentName:"p"},"require")," if it causes errors for you (for example, because of different module system):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"documents:\n  - './src/*.jsx':\n    noRequire: true\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Your operations should be declared as template strings with the ",(0,l.kt)("inlineCode",{parentName:"p"},"gql")," tag or with a GraphQL comment (",(0,l.kt)("inlineCode",{parentName:"p"},"const myQuery = /* GraphQL*/`query { ... }`"),"). This can be configured with ",(0,l.kt)("inlineCode",{parentName:"p"},"pluckConfig")," (see below).")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h3",{parentName:"li",id:"string"},"String"))),(0,l.kt)("p",null,"You can specify your GraphQL documents directly as an AST string in your config file. It's very useful for testing."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"documents:\n  - 'query { f1 }'\n  - 'query { f2 }'\n")),(0,l.kt)("h2",{id:"graphql-tag-pluck"},"GraphQL Tag Pluck"),(0,l.kt)("p",null,"GraphQL Code Generator uses ",(0,l.kt)("inlineCode",{parentName:"p"},"graphql-tag-pluck")," internally to extract GraphQL documents from your code file."),(0,l.kt)("p",null,"If you are pointing to a code file (such as ",(0,l.kt)("inlineCode",{parentName:"p"},".js")," or ",(0,l.kt)("inlineCode",{parentName:"p"},".jsx"),"), GraphQL will try to look for usages of ",(0,l.kt)("inlineCode",{parentName:"p"},"gql")," tag, or string literals that are using magic GraphQL comment (",(0,l.kt)("inlineCode",{parentName:"p"},"/* GraphQL */"),"), for example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { gql } from 'graphql-tag';\n\n// This will work\nconst MY_QUERY = gql`\n  query myQuery {\n    getSomething {\n      id\n    }\n  }\n`;\n\n// This will also work\nconst MY_QUERY = /* GraphQL */`\n  query myQuery {\n    getSomething {\n      id\n    }\n  }\n`;\n\n// ... some components code ...\n")),(0,l.kt)("p",null,"By default, it has a predefined list of popular ",(0,l.kt)("inlineCode",{parentName:"p"},"gql")," tags to look for, in order to make sure it's not trying to extract an invalid or unrelated string. ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ardatan/graphql-tools/blob/master/packages/graphql-tag-pluck/src/visitor.ts#L12"},"The default list could be found here")),(0,l.kt)("p",null,"You can add custom tags if you need, by using ",(0,l.kt)("inlineCode",{parentName:"p"},"pluckConfig")," on the root level on your config file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"pluckConfig:\n  modules:\n    - name: my-custom-module\n      identifier: gql\n")),(0,l.kt)("p",null,"You can also customize globally used identifiers, like that:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"pluckConfig:\n  globalGqlIdentifierName:\n    - gql\n    - graphql\n    - myCustomGlobalGqlTag\n")),(0,l.kt)("p",null,"And you can customize the magic GraphQL commend by doing:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"pluckConfig:\n  gqlMagicComment: customcomment\n")),(0,l.kt)("h2",{id:"custom-document-loader"},"Custom Document Loader"),(0,l.kt)("p",null,"If your schema has a different or complicated way of loading, you can specify a custom loader with the ",(0,l.kt)("inlineCode",{parentName:"p"},"loader")," field."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'documents:\n    - "**/*.graphql":\n        loader: my-documents-loader.js\n')),(0,l.kt)("p",null,"Your custom loader should export a default function that returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"DocumentNode"),". For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { parse } = require('graphql');\nconst { readFileSync } = require('fs');\n\nmodule.exports = function(docString, config) {\n  return parse(readFileSync(docString, { encoding: 'utf-8' }));\n};\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"The second parameter passed to the loader function is a config object that includes a ",(0,l.kt)("inlineCode",{parentName:"p"},"pluginContext")," property. This value is passed to any executed plugins, so it can be modified by the loader to pass any additional information to those plugins.")))}u.isMDXComponent=!0}}]);