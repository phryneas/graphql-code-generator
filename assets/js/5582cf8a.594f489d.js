(self.webpackChunk_graphql_codegen_website=self.webpackChunk_graphql_codegen_website||[]).push([[4386],{35318:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(27378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),l=s(n),m=o,f=l["".concat(p,".").concat(m)]||l[m]||u[m]||a;return n?r.createElement(f,c(c({ref:t},d),{},{components:n})):r.createElement(f,c({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=l;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var s=2;s<a;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},73890:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},metadata:function(){return i},toc:function(){return p},default:function(){return d}});var r=n(29603),o=n(50120),a=(n(27378),n(35318)),c={id:"extend-schema",title:"How to extend the GraphQL Schema?"},i={unversionedId:"custom-codegen/extend-schema",id:"custom-codegen/extend-schema",isDocsHomePage:!1,title:"How to extend the GraphQL Schema?",description:"Each plugin can also specify addToSchema field, and to extend the GraphQLSchema with more types:",source:"@site/docs/custom-codegen/extend-schema.md",sourceDirName:"custom-codegen",slug:"/custom-codegen/extend-schema",permalink:"/docs/custom-codegen/extend-schema",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/custom-codegen/extend-schema.md",version:"current",frontMatter:{id:"extend-schema",title:"How to extend the GraphQL Schema?"},sidebar:"sidebar",previous:{title:"Validate Plugin Configuration",permalink:"/docs/custom-codegen/validate-configuration"},next:{title:"Visitor Pattern",permalink:"/docs/custom-codegen/using-visitor"}},p=[],s={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Each plugin can also specify ",(0,a.kt)("inlineCode",{parentName:"p"},"addToSchema")," field, and to extend the ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," with more types:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = {\n  plugin: (schema, documents, config) => {\n    const typesMap = schema.getTypeMap();\n\n    return Object.keys(typesMap).join('\\n');\n  },\n  addToSchema: `\n        type MyType { field: String }\n\n        directive @myDirective on OBJECT\n    `\n};\n")),(0,a.kt)("p",null,"It's useful when you wish to add things like declerative ",(0,a.kt)("inlineCode",{parentName:"p"},"@directive")," to your ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLSchema"),", that effects only the output of the codegen."),(0,a.kt)("p",null,"For example, let's add a custom ",(0,a.kt)("inlineCode",{parentName:"p"},"@directive")," that tells the codegen to ignore a specific ",(0,a.kt)("inlineCode",{parentName:"p"},"type"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = {\n  plugin: (schema, documents, config, info) => {\n    const typesMap = schema.getTypeMap();\n\n    return Object.keys(typesMap)\n      .filter(typeName => {\n        const type = typesMap[typeName];\n        const astNode = type.astNode;\n\n        if (astNode && astNode.directives && astNode.directives.find(d => d.name.value === 'ignore')) {\n          return false;\n        }\n\n        return true;\n      })\n      .join('\\n');\n  },\n  addToSchema: `\n        directive @ignore on OBJECT\n    `\n};\n")))}d.isMDXComponent=!0}}]);