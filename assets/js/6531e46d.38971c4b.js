(self.webpackChunk_graphql_codegen_website=self.webpackChunk_graphql_codegen_website||[]).push([[8636],{35318:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return u}});var r=n(27378);function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,p=function(e,t){if(null==e)return{};var n,r,p={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(p[n]=e[n]);return p}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(p[n]=e[n])}return p}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,p=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(n),u=p,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||o;return n?r.createElement(h,a(a({ref:t},c),{},{components:n})):r.createElement(h,a({ref:t},c))}));function u(e,t){var n=arguments,p=t&&t.mdxType;if("string"==typeof e||p){var o=n.length,a=new Array(o);a[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:p,a[1]=i;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6010:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return i},toc:function(){return l},default:function(){return c}});var r=n(29603),p=n(50120),o=(n(27378),n(35318)),a={id:"typescript-apollo-client-helpers",title:"Apollo-Client Helpers"},i={unversionedId:"plugins/typescript-apollo-client-helpers",id:"plugins/typescript-apollo-client-helpers",isDocsHomePage:!1,title:"Apollo-Client Helpers",description:"This plugin generates helpers for improving the integration of TypeScript and Apollo-Client, based on your schema.",source:"@site/docs/plugins/typescript-apollo-client-helpers.md",sourceDirName:"plugins",slug:"/plugins/typescript-apollo-client-helpers",permalink:"/docs/plugins/typescript-apollo-client-helpers",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/plugins/typescript-apollo-client-helpers.md",version:"current",frontMatter:{id:"typescript-apollo-client-helpers",title:"Apollo-Client Helpers"},sidebar:"sidebar",previous:{title:"TypedDocumentNode",permalink:"/docs/plugins/typed-document-node"},next:{title:"TypeScript GraphQL-Request",permalink:"/docs/plugins/typescript-graphql-request"}},l=[{value:"How to use?",id:"how-to-use",children:[]}],s={toc:l};function c(e){var t=e.components,n=(0,p.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This plugin generates helpers for improving the integration of TypeScript and Apollo-Client, based on your schema."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: this plugin generates code that intended for ",(0,o.kt)("inlineCode",{parentName:"p"},"apollo-client")," @ ",(0,o.kt)("inlineCode",{parentName:"p"},"> v3")," only.")),(0,o.kt)("p",null,"This plugin generates fully-typed ",(0,o.kt)("inlineCode",{parentName:"p"},"keyFields")," and Type-Policies for Apollo-Client."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/caching/cache-configuration/#typepolicy-fields"},"You can read more about type-policies in Apollo Cache here"))),(0,o.kt)("h3",{id:"how-to-use"},"How to use?"),(0,o.kt)("p",null,"Start by add this plugin to your configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"schema: my-schema.graphql\ngenerates:\n  apollo-helpers.ts:\n    plugins:\n      - typescript-apollo-client-helpers\n")),(0,o.kt)("p",null,"Then, use the generated TypeScript ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," as your signature for ",(0,o.kt)("inlineCode",{parentName:"p"},"typePolicies"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { TypedTypePolicies } from './apollo-helpers';\n\nconst typePolicies: TypedTypePolicies = {\n  // Keys in this object will be validated against the typed on your schema\n  Product: {\n    keyFields: ['id'], // Values in this field will be validated against the available fields from the Product type\n  },\n  Person: {\n    keyFields: ['name', 'email'],\n  },\n  Book: {\n    // This entire definition is typed, based on available types and fields\n    fields: {\n      tags: {\n        merge: false,\n      },\n    },\n  },\n};\n\nconst cache = new InMemoryCache({\n  typePolicies,\n});\n")),(0,o.kt)("p",null,(0,o.kt)("h2",{parentName:"p"},"Installation"),(0,o.kt)("img",{alt:"typescript-apollo-client-helpers plugin version",src:"https://img.shields.io/npm/v/@graphql-codegen/typescript-apollo-client-helpers?color=%23e15799&label=plugin\xa0version&style=for-the-badge"}),(0,o.kt)("div",{parentName:"p",className:"admonition admonition-shell"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16pt",height:"16pt",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",d:"M0 0v16h16V0zm15.063 15.063H.937v-11h14.126zm0-11.938H.937V.937h14.126zm0 0"}),(0,o.kt)("path",{parentName:"svg",d:"M1.875 1.563h.938V2.5h-.938zm0 0M3.438 1.563h.937V2.5h-.938zm0 0M5 1.563h.938V2.5H5zm0 0M1.875 5.074v1.348l.988.637-.988.578V9.05l2.828-1.668v-.586zm0 0M5.34 7.559h1.027v1.226H5.34zm0 0M5.34 5.32h1.027v1.23H5.34zm0 0M6.8 8.785h2.356v1.137H6.801zm0 0"}))),"Using ",(0,o.kt)("inlineCode",{parentName:"h5"},"yarn"))),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},"yarn add -D @graphql-codegen/typescript-apollo-client-helpers\n")))),(0,o.kt)("h2",{parentName:"p"},"API Reference"),(0,o.kt)("h3",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"h3"},"useTypeImports")),(0,o.kt)("p",{parentName:"p"},"type: ",(0,o.kt)("inlineCode",{parentName:"p"},"boolean"),"\ndefault: ",(0,o.kt)("inlineCode",{parentName:"p"},"false")),(0,o.kt)("p",{parentName:"p"},"Will use ",(0,o.kt)("inlineCode",{parentName:"p"},"import type {}")," rather than ",(0,o.kt)("inlineCode",{parentName:"p"},"import {}"),' when importing only types. This gives\ncompatibility with TypeScript\'s "importsNotUsedAsValues": "error" option'),(0,o.kt)("h3",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"h3"},"requireKeyFields")),(0,o.kt)("p",{parentName:"p"},"type: ",(0,o.kt)("inlineCode",{parentName:"p"},"boolean"),"\ndefault: ",(0,o.kt)("inlineCode",{parentName:"p"},"false")),(0,o.kt)("p",{parentName:"p"},"Remove optional sign from all ",(0,o.kt)("inlineCode",{parentName:"p"},"keyFields")," fields."),(0,o.kt)("h3",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"h3"},"requirePoliciesForAllTypes")),(0,o.kt)("p",{parentName:"p"},"type: ",(0,o.kt)("inlineCode",{parentName:"p"},"boolean"),"\ndefault: ",(0,o.kt)("inlineCode",{parentName:"p"},"false")),(0,o.kt)("p",{parentName:"p"},"Remove optional sign from all generated keys of the root TypePolicy.")))}c.isMDXComponent=!0}}]);